Max min element

#include <stdio.h>

void main()
{
    int arr1[100];
    int i, mx, mn, n;
	
	
       printf("\n\nFind maximum and minimum element in an array :\n");
       printf("--------------------------------------------------\n");	

       printf("Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
            {
	      printf("element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }


    mx = arr1[0];
    mn = arr1[0];

    for(i=1; i<n; i++)
    {
        if(arr1[i]>mx)
        {
            mx = arr1[i];
        }


        if(arr1[i]<mn)
        {
            mn = arr1[i];
        }
    }
    printf("Maximum element is : %d\n", mx);
    printf("Minimum element is : %d\n\n", mn);
}


///////////////////////////////////////////////////////////////

#include <stdio.h>  
  
void  main()  
{  
    int arr[10]; 
    int i;  
       printf("\n\nRead and Print elements of an array:\n");
       printf("-----------------------------------------\n");	
  
    printf("Input 10 elements in the array :\n");  
    for(i=0; i<10; i++)  
    {  
	    printf("element - %d : ",i);
        scanf("%d", &arr[i]);  
    }  
  
    printf("\nElements in array are: ");  
    for(i=0; i<10; i++)  
    {  
        printf("%d  ", arr[i]);  
    } 
    printf("\n");	
}

////////
#include <stdio.h>

void main()
{
   int i,n,a[100];
   
       printf("\n\nRead n number of values in an array and display it in reverse order:\n");
       printf("------------------------------------------------------------------------\n");
   
   printf("Input the number of elements to store in the array :");
   scanf("%d",&n);
   
   printf("Input %d number of elements in the array :\n",n);
   for(i=0;i<n;i++)
      {
	  printf("element - %d : ",i);
	  scanf("%d",&a[i]);
	  }
      
   printf("\nThe values store into the array are : \n");
   for(i=0;i<n;i++)
     {
	   printf("% 5d",a[i]);
	 }
 
   printf("\n\nThe values store into the array in reverse are :\n");
   for(i=n-1;i>=0;i--)
      {
	   printf("% 5d",a[i]);
	  }
   printf("\n\n");
} 

//////////////////////////////////////

SUM


#include <stdio.h>

void main()
{
    int a[100];
    int i, n, sum=0;
	
	
       printf("\n\nFind sum of all elements of array:\n");
       printf("--------------------------------------\n");	

       printf("Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
        {
	      printf("element - %d : ",i);
	      scanf("%d",&a[i]);
	    }

    for(i=0; i<n; i++)
    {
        sum += a[i];
    }

    printf("Sum of all elements stored in the array is : %d\n\n", sum);
}



////////////////////////////////////////











#include <stdio.h>

void main()
{
    int arr1[100], arr2[100];
    int i, n;
	
	
       printf("\n\nCopy the elements one array into another array :\n");
       printf("----------------------------------------------------\n");
	   
       printf("Input the number of elements to be stored in the array :");
       scanf("%d",&n);
   
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
        {
	      printf("element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }
    /* Copy elements of first array into second array.*/ 
    for(i=0; i<n; i++)
    {
        arr2[i] = arr1[i];
    }

    /* Prints the elements of first array   */
    printf("\nThe elements stored in the first array are :\n");
    for(i=0; i<n; i++)
    {
        printf("% 5d", arr1[i]);
    }

    /* Prints the elements copied into the second array. */
    printf("\n\nThe elements copied into the second array are :\n");
    for(i=0; i<n; i++)
    {
        printf("% 5d", arr2[i]);
    }
	       printf("\n\n");
}
/////////////////////////////////////////////

An array is defined as the collection of similar type of data items stored at contiguous memory locations. 
Arrays are the derived data type in C programming language which can store the primitive type of data such as int,
char, double, float, etc. It also has the capability to store the collection of derived data types, such as pointers, structure, etc.
The array is the simplest data structure where each data element can be randomly accessed by using its index number.
C array is beneficial if you have to store similar elements. For example, if we want to store the marks of a student in 6 subjects, 
then we don't need to define different variables for the marks in the different subject. Instead of that, we can define an array which can store the 
marks in each subject at the contiguous memory locations.

/////////////////////////////////////////////////////
A pointer is a variable that stores the memory address of another variable as its value.
A pointer variable points to a data type (like int) of the same type, and is created with the * operator.
The address of the variable you're working with is assigned to the pointer
int myAge = 43;     // An int variable
int* ptr = &myAge;  // A pointer variable, with the name ptr, that stores the address of myAge

The Pointer in C, is a variable that stores address of another variable. 
A pointer can also be used to refer to another pointer function. 
A pointer can be incremented/decremented, i.e., to point to the next/ previous memory location. 
The purpose of pointer is to save memory space and achieve faster execution time.

// Output the value of myAge (43)
printf("%d\n", myAge);

// Output the memory address of myAge (0x7ffe5367e044)
printf("%p\n", &myAge);

// Output the memory address of myAge with the pointer (0x7ffe5367e044)
printf("%p\n", ptr);
////////////////////////////////////////////////
In C programming, a string is a sequence of characters terminated with a null character \0 .
For example: char c[] = "c string"; 
When the compiler encounters a sequence of characters enclosed in the double quotation marks, 
it appends a null character \0 at the end by default.
Strings are actually one-dimensional array of characters terminated by a null character '\0'. 
Thus a null-terminated string contains the characters that comprise the string followed by a null. 
The following declaration and initialization create a string consisting of the word "Hello".

//////////////////////////////////////////////////////
The for loop in C language is used to iterate the statements or a part of the program several times.
It is frequently used to traverse the data structures like the array and linked list.
The for statement lets you repeat a statement or compound statement a specified number of times. 
The body of a for statement is executed zero or more times until an optional condition becomes false.
/////////////////////////////////////////////////////////
While for difference

Use a for loop when you know the loop should execute n times. 
Use a while loop for reading a file into a variable. 
Use a while loop when asking for user input. Use a while loop when the increment value is nonstandard.
In 'for' loop the initialization once done is never repeated. 
In while loop if initialization is done during condition checking, then initialization is done each time the loop iterate
//////////////////////////////////////////////////

#include <stdio.h>
int main()
{
    int arr1[100], n,ctr=0;
    int i, j, k;
       printf("\n\nPrint all unique elements of an array:\n");
       printf("------------------------------------------\n");	
       printf("Input the number of elements to be stored in the array: ");
       scanf("%d",&n);
       printf("Input %d elements in the array :\n",n);
       for(i=0;i<n;i++)
            {
	      printf("element - %d : ",i);
	      scanf("%d",&arr1[i]);
	    }
    printf("\nThe unique elements found in the array are: \n");
    for(i=0; i<n; i++)
    {
        ctr=0;
        for(j=0,k=n; j<k+1; j++)
        {
            /*Increment the counter when the seaarch value is duplicate.*/
            if (i!=j)
            {
		       if(arr1[i]==arr1[j])
              {
                 ctr++;
               }
             }
        }
       if(ctr==0)
        {
          printf("%d ",arr1[i]);
        }
    }
       printf("\n\n");
}

/////////////////////////////////////////////////////////////





////////////////////////////////////////////////////////////
Pointer
Find the maximum number between two numbers

#include <stdio.h>
#include <stdlib.h>
void main()
{
 int fno,sno,*ptr1=&fno,*ptr2=&sno;
 
   printf("\n\n Pointer : Find the maximum number between two numbers :\n"); 
   printf("------------------------------------------------------------\n");   
 
   printf(" Input the first number : ");
   scanf("%d", ptr1);
   printf(" Input the second  number : ");
   scanf("%d", ptr2); 


 if(*ptr1>*ptr2)
 {
  printf("\n\n %d is the maximum number.\n\n",*ptr1);
 }
 else
 {
  printf("\n\n %d is the maximum number.\n\n",*ptr2);
 }

}
/////////////////////////////////////////////////////////////


Add two numbers using call by reference

#include <stdio.h>
long addTwoNumbers(long *, long *);
 
int main()
{
   long fno, sno, sum;
   
   printf("\n\n Pointer : Add two numbers using call by reference:\n"); 
   printf("-------------------------------------------------------\n");   
 
   printf(" Input the first number : ");
   scanf("%ld", &fno);
   printf(" Input the second  number : ");
   scanf("%ld", &sno);   
   sum = addTwoNumbers(&fno, &sno);
   printf(" The sum of %ld and %ld  is %ld\n\n", fno, sno, sum);
   return 0;
}
long addTwoNumbers(long *n1, long *n2) 
{
   long sum;
   sum = *n1 + *n2;
   return sum;
}

//////////////////////////


#include <stdio.h>
int main()
{
   int fno, sno, *ptr, *qtr, sum;
   
   printf("\n\n Pointer : Add two numbers :\n"); 
   printf("--------------------------------\n");   
 
   printf(" Input the first number : ");
   scanf("%d", &fno);
   printf(" Input the second  number : ");
   scanf("%d", &sno);   
 
   ptr = &fno;
   qtr = &sno;
 
   sum = *ptr + *qtr;
 
   printf(" The sum of the entered numbers is : %d\n\n",sum);
 
   return 0;
}
////////
Find the factorial of a given number

#include <stdio.h>
void findFact(int,int*);
int main()
{
         int fact;
         int num1;
		printf("\n\n Pointer : Find the factorial of a given number :\n"); 
		printf("------------------------------------------------------\n");	
		printf(" Input a number : ");
		scanf("%d",&num1);		 

         findFact(num1,&fact);
         printf(" The Factorial of %d is : %d \n\n",num1,fact);
         return 0;
        }

void findFact(int n,int *f)
		{
        int i;

       *f =1;
       for(i=1;i<=n;i++)
       *f=*f*i;
       }
//////////////////////////////////

copy all elements of one array to another

#include <stdio.h>
#define MAX_SIZE 100 //Maximum size of the array

int main()
{
    int first[MAX_SIZE], second[MAX_SIZE];
    int i, num;

    //Enter size of array
    printf("Enter the size of the array : ");
    scanf("%d", &num);

    //Reading elements of array
    printf("Enter elements of first array : ");
    for(i=0; i<num; i++)
    {
        scanf("%d", &first[i]);
    }


   //Copy all elements from first array to second array
   for(i=0; i<num; i++)
    {
        second[i] = first[i];
    }

    //Printing all elements of first array entered by user
    printf("\nElements of first array are: \n");
    for(i=0; i<num; i++)
    {
        printf("%d\t", first[i]);
    }


    //Printing all elements of second array
    printf("\nElements of second array are: \n ");
                                for(i=0; i<num; i++)
    {
        printf("%d\t", second[i]);
    }

  return 0;
}
/////////////////////
count number of each element in an array


#include <stdio.h>

int main()
{
    int arr[100], frequency[100];
    int i, j, count, num;

    //Enter size of array
    printf("Enter size of array: ");
    scanf("%d", &num);

    //Reading elements of array
    printf("Enter elements in array: ");
    for(i=0; i<num; i++)
    {
        scanf("%d", &arr[i]);

        //Initially initialize frequency variable to -1
        frequency[i] = -1;
    }

     for(i=0; i<num; i++)
    {
        count = 1;
        for(j=i+1; j<num; j++)
        {
        //If duplicate element is found
        if(arr[i]==arr[j])
            {
                count++;

                //Make sure not to count frequency of same element again
                frequency[j] = 0;
            }
        }

        //If frequency of current element is not counted
        if(frequency[i] != 0)
        {
            frequency[i] = count;
        }
    }

    //Print frequency of each element
    printf("\nFrequency of all elements of array : \n");
    for(i=0; i<num; i++)
    {
      if(frequency[i] != 0)
        {
            printf("%d occurs %d times\n", arr[i], frequency[i]);
        }
    }

       return 0;
}

////////////////////////

delete all duplicate elements from an array

#include <stdio.h>
#define MAX_SIZE 100 // Maximum size of the array

int main()
{
    int arr[MAX_SIZE]; // Declares an array of size 100
    int num; // Total number of elements in array
    int i, j, k;

    //Enter size of array
    printf("Enter size of the array : ");
    scanf("%d", &num);

    //Reading elements of array
    printf("Enter elements in array : ");
    for(i=0; i<num; i++)
    {
        scanf("%d", &arr[i]);
    }

    // Finding all duplicate elements in array

    for(i=0; i<num; i++)
    {
        for(j=i+1; j<num; j++)
        {
            //If any duplicate found */
            if(arr[i] == arr[j])
            {
                // Delete the current duplicate element
                for(k=j; k<num; k++)
                {
                    arr[k] = arr[k + 1];
                }

                //Decrement size after removing duplicate element
                num--;

                // If shifting of elements occur then don't increment j
                j--;
            }
        }
    }



    // Print array after deleting duplicate elements

    printf("\nArray elements after deleting duplicates : ");
    for(i=0; i<num; i++)
    {
        printf("%d\t", arr[i]);
    }

    return 0;
}

/////////////////////////////////
find reverse of an array

#include < stdio.h > #define MAX_SIZE 100 //Maximum size of array

int main() {
int array[MAX_SIZE];
int size, i;

  // Reading size of array
  printf("Enter size of the array: ");
  scanf("%d", & size);

  // Reading array elements
  printf("Enter elements in array: ");
    for (i = 0; i < size; i++) {
    scanf("%d", & array[i]);
  }

  //Print array in reversed order
  printf("\nArray in reverse order: ");
    for (i = size - 1; i >= 0; i--) {
    printf("%d\t", array[i]);
  }

    return 0;
}

////
left rotate an array

#include <stdio.h>
#define size 5 // defining Size of the array

void printArray(int arr[]);
void rotateByOne(int arr[]);


int main()
{
    int i, num;
    int arr[size];

    printf("Enter 5 elements array: ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &arr[i]);
    }
    printf("Enter number of times to left rotate: ");
    scanf("%d", &num);

    // Actual rotation
    num = num % size;

    // Printing array before rotation
    printf("Array before rotationn");
    printArray(arr);

    // Rotating array n times
    for(i=1; i<=num; i++)
    {
        rotateByOne(arr);
    }

    // Printing array after rotation
    printf("\n\nArray after rotation\n");
    printArray(arr);

    return 0;
}

void rotateByOne(int arr[])
{
    int i, first;

    // Storing first element of array
    first = arr[0];

    for(i=0; i<size-1; i++)
    {
        // Moving each array element to its left
        arr[i] = arr[i + 1];
    }

    // Copying the first element of array to last
    arr[size-1] = first;
}


//Printing the given array

void printArray(int arr[])
{
    int i;

    for(i=0; i<size; i++)
    {
        printf("%d ", arr[i]);
    }
}

////////////////
right rotate an array

#include <stdio.h>
#define size 5 // Declaring Size of the array

void printArray(int arr[]);
void rotateByOne(int arr[]);


int main()
{
    int i, num;
    int arr[size];

    printf("Enter 5 elements array: ");
    for(i=0; i<size; i++)
    {
        scanf("%d", &arr[i]);
    }
    printf("Enter number of times to right rotate: ");
    scanf("%d", &num);

    // Actual rotation
    num = num % size;

    // Printing array before rotation
    printf("Array before rotationn");
    printArray(arr);

    // Rotate array n times
    for(i=1; i<=num; i++)
    {
        rotateByOne(arr);
    }

    // Printing array after rotation
    printf("\n\nArray after rotation\n");
    printArray(arr);

    return 0;
}


void rotateByOne(int arr[])
{
    int i, last;

    // Storing last element of array
    last = arr[size - 1];

    for(i=size-1; i>0; i--)
    {
        // Moving each array element to its right
        arr[i] = arr[i - 1];
    }

   // Copying last element of array to first
    arr[0] = last;
}


//Printing the given array
void printArray(int arr[])
{
    int i;

    for(i=0; i<size; i++)
    {
        printf("%d ", arr[i]);
    }
}


///////////////////////////////////////////

Decimal to binary

#include<stdio.h>    
#include<stdlib.h>  
int main(){  
int a[10],n,i;    
system ("cls");  
printf("Enter the number to convert: ");    
scanf("%d",&n);    
for(i=0;n>0;i++)    
{    
a[i]=n%2;    
n=n/2;    
}    
printf("\nBinary of Given Number is=");    
for(i=i-1;i>=0;i--)    
{    
printf("%d",a[i]);    
}    
return 0;  
}  



//////////////////////////////
Binary to Decimal
// convert binary to decimal

#include <stdio.h>
#include <math.h>

// function prototype
int convert(long long);

int main() {
  long long n;
  printf("Enter a binary number: ");
  scanf("%lld", &n);
  printf("%lld in binary = %d in decimal", n, convert(n));
  return 0;
}

// function definition
int convert(long long n) {
  int dec = 0, i = 0, rem;

  while (n!=0) {
    rem = n % 10;
    n /= 10;
    dec += rem * pow(2, i);
    ++i;
  }

  return dec;
}





/////////////////
// Program to create a simple calculator
#include <stdio.h>

int main() {
    char operation;
    double n1, n2;

    printf("Enter an operator (+, -, *, /): ");
    scanf("%c", &operation);
    printf("Enter two operands: ");
    scanf("%lf %lf",&n1, &n2);

    switch(operation)
    {
        case '+':
            printf("%.1lf + %.1lf = %.1lf",n1, n2, n1+n2);
            break;

        case '-':
            printf("%.1lf - %.1lf = %.1lf",n1, n2, n1-n2);
            break;

        case '*':
            printf("%.1lf * %.1lf = %.1lf",n1, n2, n1*n2);
            break;

        case '/':
            printf("%.1lf / %.1lf = %.1lf",n1, n2, n1/n2);
            break;

        // operator doesn't match any case constant +, -, *, /
        default:
            printf("Error! operator is not correct");
    }

    return 0;
}

//////////////////////////////////////////////


For Loop
#include<stdio.h>  
int main(){  
int i=1,number=0;      
printf("Enter a number: ");    
scanf("%d",&number);    
for(i=1;i<=10;i++){      
printf("%d \n",(number*i));    
}    
return 0;  
}    


////////////////////////////
// Print numbers from 1 to 5

#include <stdio.h>
int main() {
  int i = 1;
    
  while (i <= 5) {
    printf("%d\n", i);
    ++i;
  }

  return 0;
}

//////////////


#include <stdio.h>
int addNumbers(int a, int b);         // function prototype

int main()
{
    int n1,n2,sum;

    printf("Enters two numbers: ");
    scanf("%d %d",&n1,&n2);

    sum = addNumbers(n1, n2);        // function call
    printf("sum = %d",sum);

    return 0;
}

int addNumbers(int a, int b)         // function definition   
{
    int result;
    result = a+b;
    return result;                  // return statement
}

///////////////

#include <stdio.h>

void checkPrimeNumber();

int main() {
  checkPrimeNumber();    // argument is not passed
  return 0;
}

// return type is void meaning doesn't return any value
void checkPrimeNumber() {
  int n, i, flag = 0;

  printf("Enter a positive integer: ");
  scanf("%d",&n);

  // 0 and 1 are not prime numbers    
  if (n == 0 || n == 1)
    flag = 1;

  for(i = 2; i <= n/2; ++i) {
    if(n%i == 0) {
      flag = 1;
      break;
    }
  }

  if (flag == 1)
    printf("%d is not a prime number.", n);
  else
    printf("%d is a prime number.", n);
}


////////////////////////////////


Pointer

#include <stdio.h>
int main()
{
   int* pc, c;
   
   c = 22;
   printf("Address of c: %p\n", &c);
   printf("Value of c: %d\n\n", c);  // 22
   
   pc = &c;
   printf("Address of pointer pc: %p\n", pc);
   printf("Content of pointer pc: %d\n\n", *pc); // 22
   
   c = 11;
   printf("Address of pointer pc: %p\n", pc);
   printf("Content of pointer pc: %d\n\n", *pc); // 11
   
   *pc = 2;
   printf("Address of c: %p\n", &c);
   printf("Value of c: %d\n\n", c); // 2
   return 0;
}

///////////////
#include <stdio.h>
void displayNumbers(int num[2][2]);

int main() {
  int num[2][2];
  printf("Enter 4 numbers:\n");
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < 2; ++j) {
      scanf("%d", &num[i][j]);
    }
  }

  // pass multi-dimensional array to a function
  displayNumbers(num);

  return 0;
}

void displayNumbers(int num[2][2]) {
  printf("Displaying:\n");
  for (int i = 0; i < 2; ++i) {
    for (int j = 0; j < 2; ++j) {
      printf("%d\n", num[i][j]);
    }
  }
}

/////////////////

// Program to take 5 values from the user and store them in an array
// Print the elements stored in the array
#include <stdio.h>

int main() {
  int values[5];

  printf("Enter 5 integers: ");

  // taking input and storing it in an array
  for(int i = 0; i < 5; ++i) {
     scanf("%d", &values[i]);
  }

  printf("Displaying integers: ");

  // printing elements of an array
  for(int i = 0; i < 5; ++i) {
     printf("%d\n", values[i]);
  }
  return 0;
}

//////
++a is the prefix increment operator whose value is increased by 1 first then the operation is performed and a++ is
the postfix increment operator whose value increased by 1 after the operation is performed.
Both a++ and ++a basically serve the same function: they increase the value of a by 1. 
But having said that, the post-increment(a++) and the pre-increment(++a) operators work differently.
 When we assign a++ to any variable, it takes the current value of a, and then increments a


ANSWER:Look above syntax of both bidirectional. The nested if is an if statement used within another if statement.
When we use if else if then an if statement is used within the else part of another if in this way,
'nested if is similar to an if else if statement.


